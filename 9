#!/usr/bin/python3
B = []
R = [1, 0, 0, 0]
O = [0, 0, 0, 0]
def to_tuple(l):
    return (l[0], l[1], l[2], l[3])
def to_s(t, r, o):
    return (t, to_tuple(r), to_tuple(o))
W = []
T = 0
def VV(I, OO, CO, BO, BC, GO, GB, w, L):
    MAXO = max(OO, CO, GO)
    S = set()
    v = 0
    W.append(w)
    while len(W) > 0:
        w = W.pop()
        if w in S:
            continue
        S.add(w)
        (t, r, o) = w
        if o[3] > v:
            print(I, w, v)
        v = max(v, o[3])
        if t > L:
            continue
        if o[3] + (L - t + 1) * (r[3] + L - t + 1) < v:
            continue
        if o[0] >= GO and o[2] >= GB:
            W.append((t + 1, (r[0], r[1], r[2], r[3] + 1), (o[0]-GO+r[0], o[1]+r[1], o[2]-GB+r[2], o[3]+r[3])))
            continue
        if o[0] >= BO and o[1] >= BC and r[2] < GB:
            W.append((t + 1, (r[0], r[1], r[2] + 1, r[3]), (o[0]-BO+r[0], o[1]-BC+r[1], o[2]+r[2], o[3]+r[3])))
        if o[0] >= CO and r[1] < BC:
            W.append((t + 1, (r[0], r[1] + 1, r[2], r[3]), (o[0]-CO+r[0], o[1]+r[1], o[2]+r[2], o[3]+r[3])))
        if o[0] >= OO and r[0] < MAXO:
            W.append((t + 1, (r[0] + 1, r[1], r[2], r[3]), (o[0]-OO+r[0], o[1]+r[1], o[2]+r[2], o[3]+r[3])))
        if o[0] <= MAXO:
            W.append((t + 1, (r[0], r[1], r[2], r[3]), (o[0]+r[0], o[1]+r[1], o[2]+r[2], o[3]+r[3])))
    print(I, v)
    return v
def V(l, L):
    x = l.split(' ')
    I, OO, CO, BO, BC, GO, GB = int(x[1][:-1]), int(x[6]), int(x[12]), int(x[18]), int(x[21]), int(x[27]), int(x[30])
    return VV(I, OO, CO, BO, BC, GO, GB, to_s(1, R, O), L)

#for i, l in enumerate([l.strip() for l in open("T", "r").readlines()]):
for i, l in enumerate([l.strip() for l in open("GEO", "r").readlines()]):
    T += (i + 1) * V(l, 24)
print("37", T)

T = 1
#for i, l in enumerate([l.strip() for l in open("T", "r").readlines()]):
for i, l in enumerate([l.strip() for l in open("GEO", "r").readlines()]):
    if i < 3:
        T *= V(l, 32)
print("38", T)
