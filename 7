#!/usr/bin/python3
r  = [l.strip() for l in open("ROCKS", "r").readlines()][0]
ri = 0
B = [["####"], [" # ", "###", " # "], ["###", "  #", "  #"], ["#", "#", "#", "#"], ["##", "##"]]
bi = 0
F = ["#"*9]
for i in range(1, 1000000000):
    F.append("#" + (" "*7) + "#")
def C(b, x, y):
    for i, Y in enumerate(b):
        for j in range(len(Y)):
            if Y[j] == "#" and F[y + i][x + j] == "#":
                return True
    return False
L = 1000000000000
Z = len(r)*len(B)
H = 0
O = 0
P1 = 0
P2 = 0
history = []
groups = []
for z in range(Z * 500):
    b = B[bi]
    bi = (bi + 1) % len(B)
    x = 3
    y = H + 4
    while True:
        if r[ri] == ">":
            if not C(b, x + 1, y):
                x = x + 1
        else:
            if not C(b, x - 1, y):
                x = x - 1
        ri = (ri + 1) % len(r)
        if not C(b, x, y - 1):
            y = y - 1
        else:
            break
    for i, Y in enumerate(b):
        for j in range(len(Y)):
            if Y[j] == "#":
                F[y + i] = F[y + i][:(x + j)] + "#" + F[y + i][(x + j + 1):]
    H = max(H, y + len(b) - 1)
    history.append(H)
    if z == 2021:
        P1 = H
    if z % Z == Z-1:
        groups.append(H - O)
        O = H
        b = int(z/Z)
        if len(groups) > 9 and groups[1:5] == groups[b-4:b]:
            cycle_len = b-5
            g = int(L / Z)
            remainder = L % (Z * cycle_len)
            P2 = int(g / cycle_len) * sum(groups[1:(cycle_len+1)]) + history[remainder-1]
            break
print("33", P1)
print("34", P2)
