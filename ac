#!/usr/bin/python3
import math

elf = 0
elves = []
for l in open("ELVES", "r").readlines():
    l = l.strip()
    if len(l):
        elf += int(l)
    else:
        elves.append(elf)
        elf = 0
if elf > 0:
    elves.append(elf)
print('1', max(elves))
top3 = sorted(elves, reverse=True)[:3]
print('2', sum(top3))

score = 0
rating = [0, 6, 3, 0, 6]
for l in open("RPS", "r").readlines():
    (a, b) = l.strip().split(' ')
    a = ord(a)-ord('A')
    b = ord(b)-ord('X')
    outcome = 2 + a - b
    score += (b + 1) + rating[outcome]
print('3', score)

score = 0
rating = [0, 3, 6]
for l in open("RPS", "r").readlines():
    (a, b) = l.strip().split(' ')
    a = ord(a)-ord('A')
    b = ord(b)-ord('X') # outcome L D W
    choice = (3 + a + b - 1) % 3;
    s = rating[b] + choice + 1
    score += s
print('4', score)

score = 0
for l in open("SACK", "r").readlines():
    l = l.strip()
    m = int(len(l)/2)
    a = l[:m]
    b = l[m:]
    i = next(iter(set(x for x in a).intersection(set(x for x in b))))
    if i >= 'a' and i <= 'z':
        score += ord(i) - ord('a') + 1
    else:
        score += ord(i) - ord('A') + 27 
print('5', score)

score = 0
l = open("SACK", "r").readlines()
i = iter(l)
for _ in range(int(len(l)/3)):
    a = set(x for x in next(i).strip())
    b = set(x for x in next(i).strip())
    c = set(x for x in next(i).strip())
    d = next(iter(a.intersection(b).intersection(c)))
    if d >= 'a' and d <= 'z':
        score += ord(d) - ord('a') + 1
    else:
        score += ord(d) - ord('A') + 27 
print('6', score)

count = 0
for l in  open("PAIRS", "r").readlines():
    (j, k) = l.strip().split(',')
    (a, b) = j.split('-')
    (x, y) = k.split('-')
    if ((int(a) <= int(x) and int(b) >= int(y)) or (int(x) <= int(a) and int(y) >= int(b))):
        count += 1
print('7', count)

count = 0
for l in  open("PAIRS", "r").readlines():
    (j, k) = l.strip().split(',')
    (a, b) = j.split('-')
    (x, y) = k.split('-')
    if (int(a) > int(y) or int(x) > int(b)) or int(b) < int(x) or int(y) < int(a):
        pass
    else:
        count += 1
print('8', count)

p = [[] for _ in range(9)]
l = open("CRATES", "r").readlines()
for x in l[8::-1]:
    r = [x[1 + i*4] for i in range(9)]
    for i in range(9):
        if r[i] != ' ':
            p[i].append(r[i])
for x in l[10:]:
    (_, n, _, f, _, t) = x.strip().split(' ')
    for y in range(int(n)):
        p[int(t)-1].append(p[int(f)-1].pop())
print('9', "".join(list(x.pop() for x in p)))

p = [[] for _ in range(9)]
l = open("CRATES", "r").readlines()
for x in l[8::-1]:
    r = [x[1 + i*4] for i in range(9)]
    for i in range(9):
        if r[i] != ' ':
            p[i].append(r[i])
for x in l[10:]:
    (_, n, _, f, _, t) = x.strip().split(' ')
    n, f, t = int(n), int(f) - 1, int(t) - 1
    p[t].extend(p[f][len(p[f])-n:])
    p[f] = p[f][:len(p[f])-n]
print('10', "".join(list(x.pop() for x in p)))

l = open("SIGNAL", "r").readlines()[0].strip()
for i in range(4, len(l)):
    if len(set(l[i-4:i])) == 4:
        break
print('11', i)

l = open("SIGNAL", "r").readlines()[0].strip()
for i in range(14, len(l)):
    if len(set(l[i-14:i])) == 14:
        break
print('12', i)

cwd = ''
files = {}
l = open("FILES", "r").readlines()
for i in range(len(l)):
    l[i] = l[i].strip()
i = 0
while i < len(l): 
    x = l[i]
    if x[0] == '$':
        if x[2] == 'c':
            if x[5] == '/':
                cwd = ''
            elif x[5] == '.':
                cwd = cwd[:cwd.rindex('/')]
            else:
                cwd = cwd + '/' + x[5:]
            i += 1
        elif x[2] == 'l':
            i += 1
            while i < len(l):
                x = l[i]
                if x[0] == '$' or i >= len(l):
                    break
                if x[0] == 'd':
                    files[cwd + '/' + x[4:]] = -1
                else:
                    (s , f) = x.split(' ')
                    files[cwd + '/' + f] = int(s)
                i += 1
        else:
            print('bad2', x)
            i += 1
    else:
        print('bad', x)
        i += 1
dirs = {}
dirs[''] = 0
for k in sorted(files.keys()):
    if files[k] < 0:
        dirs[k] = 0
    for d in dirs:
        if k not in dirs:
            if k.startswith(d):
                dirs[d] += files[k]
total = 0
for d in dirs:
    if dirs[d] <= 100000:
        total += dirs[d]
print('13', total)

need = dirs[''] - 40000000
delete = 0
for t in sorted(dirs.values()):
    delete = t
    if t >= need:
        break
print('14', delete)


l = open("TREES", "r").readlines()
for i in range(len(l)):
    l[i] = l[i].strip()
X = len(l[0])
Y = len(l)

total = 2 * (X - 1) + 2 * (Y - 1)  # outer
trees = [0] * (Y-2)
for y in range(Y-2):
    trees[y] = [0] * (X-2)

for y in range(1, Y-1):
    height = 0
    for x in range(X-1):
        h = l[y][x]
        if x == 0:
            height = h
            continue
        if h > height:
            height = h
            trees[y-1][x-1] = 1
for y in range(1, Y-1):
    height = 0
    for x in range(X-1, 0, -1):
        h = l[y][x]
        if x == X-1:
            height = h
            continue
        if h > height:
            height = h
            trees[y-1][x-1] = 1
for x in range(1, X-1):
    height = 0
    for y in range(Y-1):
        h = l[y][x]
        if y == 0:
            height = h
            continue
        if h > height:
            height = h
            trees[y-1][x-1] = 1
for x in range(1, X-1):
    height = 0
    for y in range(Y-1, 0, -1):
        h = l[y][x]
        if y == Y-1:
            height = h
            continue
        if h > height:
            height = h
            trees[y-1][x-1] = 1
for y in trees:
    for x in y:
        if x > 0:
            total += 1
print('15', total)

trees = [0] * Y
for y in range(Y):
    trees[y] = [1] * X
def view(h, p):
    if len(p) == 0:
        return 0
    for i in range(len(p)):
        if p[i] >= h:
            return i + 1
    return len(p)
def rview(h, p):
    if len(p) == 0:
        return 0
    for i in range(len(p)-1,-1,-1):
        if p[i] >= h:
            return len(p) -1 - i + 1
    return len(p)
for y in range(0, Y):
    for x in range(X):
        h = l[y][x]
        p = l[y][:x]
        trees[y][x] *= rview(h, p)
        p = l[y][x+1:]
        trees[y][x] *= view(h, p)
        pp = "".join([l[j][x] for j in range(Y)])
        p = pp[:y]
        trees[y][x] *= rview(h, p)
        p = pp[y+1:]
        trees[y][x] *= view(h, p)
h = -1
for y in trees:
    for x in y:
        if x > h:
            h = x
print('16', h)

def move(p, d):
    return (p[0] + d[0], p[1] + d[1])
def delta(h, t):
    x, y = t[0], t[1]
    if abs(h[0] - t[0]) > 1 or abs(h[1] - t[1]) > 1:
        if h[0] != t[0]:
            x = int(x + math.copysign(1, h[0] - t[0]))
        if h[1] != t[1]:
            y = int(y + math.copysign(1, h[1] - t[1]))
    return (x, y)

visited = set()
dir = { 'L' : (-1, 0), 'R': (1, 0), 'U': (0, -1), 'D': (0, 1) }
H = (0, 0)
T = (0, 0)
lines = open("ROPE", "r").readlines()
for l in lines:
    d, n =  l.strip().split(' ')
    for _ in range(int(n)):
        H = move(H, dir[d])
        T = delta(H, T)
        visited.add(T)
print('17', len(visited))

visited = set()
N = [(0, 0)] * 10
lines = open("ROPE", "r").readlines()
for l in lines:
    d, n =  l.strip().split(' ')
    for _ in range(int(n)):
        N[0] = move(N[0], dir[d])
        for i in range(1, 10):
            N[i] = delta(N[i-1], N[i])
        visited.add(N[9])
print('18', len(visited))

C = 1
X = 1
T = 0
def score():
    global T
    if (C < 221 and C > 19 and (C - 20) % 40 == 0):
        T += C * X
for l in open("PROG", "r").readlines():
    if l[0] == 'n':
        C += 1
        score()
    else:
        (c, v) = l.strip().split(' ')
        C += 1
        score()
        C += 1
        X += int(v)
        score()
print('19', T)

C = 1
X = 1
S = [0]*6
for i in range(6):
    S[i] = [' '] * 40
def score():
    global S
    p = ((C-1) % 40)
    l = int(((C-1) / 40))
    if p - 1 == X or p == X or p + 1 == X:
        S[l][p] = 'X'
for l in open("PROG", "r").readlines():
    if l[0] == 'n':
        C += 1
        score()
    else:
        (c, v) = l.strip().split(' ')
        C += 1
        score()
        C += 1
        X += int(v)
        score()
print('20')
for l in S:
    print("".join(l))

S, O, D, T, F = [], [], [], [], []
I =[0]*8
l = open("MONKEY", "r").readlines()
for i in range(0, 56, 7):
    S.append([int(x.strip()) for x in l[i+1].strip().split(':')[1].split(',')])
    O.append(l[i+2].strip().split('=')[1])
    D.append(int(l[i+3].strip()[-2:]))
    T.append(int(l[i+4].strip()[-2:]))
    F.append(int(l[i+5].strip()[-2:]))
new = 0
for _ in range(20):
    for m in range(8):
        I[m] += len(S[m])
        for old in reversed(S[m]):
            new = int(eval(O[m])/3)
            if new % D[m] == 0:
                S[T[m]].append(new)
            else:
                S[F[m]].append(new)
        S[m] = []
I = sorted(I, reverse=True)
print('21', I[0] * I[1])

S, O, D, T, F = [], [], [], [], []
DD = 1
I =[0]*8
l = open("MONKEY", "r").readlines()
for i in range(0, 56, 7):
    S.append([int(x.strip()) for x in l[i+1].strip().split(':')[1].split(',')])
    O.append(l[i+2].strip().split('=')[1])
    D.append(int(l[i+3].strip()[-2:]))
    DD *= D[len(D)-1]
    T.append(int(l[i+4].strip()[-2:]))
    F.append(int(l[i+5].strip()[-2:]))
new = 0
for q in range(10000):
    for m in range(8):
        I[m] += len(S[m])
        for old in reversed(S[m]):
            new = eval(O[m]) % DD
            if new % D[m] == 0:
                S[T[m]].append(new)
            else:
                S[F[m]].append(new)
        S[m] = []
I = sorted(I, reverse=True)
print(I)
print('22', I[0] * I[1])
